// Code generated by go-swagger; DO NOT EDIT.

package ntnxv3models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Project Project resource spec
//
// A Project resource.
//
// swagger:model project
type Project struct {

	// Project description.
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// Project name.
	// Required: true
	// Max Length: 64
	Name *string `json:"name"`

	// resources
	// Required: true
	Resources *ProjectResources `json:"resources"`
}

// Validate validates this project
func (m *Project) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 64); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project based on the context it is used
func (m *Project) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Project) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Project) UnmarshalBinary(b []byte) error {
	var res Project
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectResources Project Resources
//
// swagger:model ProjectResources
type ProjectResources struct {

	// List of accounts associated with the project.
	AccountReferenceList []*AccountReference `json:"account_reference_list"`

	// List of clusters associated with the project.
	ClusterReferenceList []*ClusterReference `json:"cluster_reference_list"`

	// Optional default environment if one is specified
	DefaultEnvironmentReference *EnvironmentReference `json:"default_environment_reference,omitempty"`

	// Optional default subnet if one is specified
	DefaultSubnetReference *SubnetReference `json:"default_subnet_reference,omitempty"`

	// List of directory references under the project
	DirectoryReferenceList []*DirectoryReference `json:"directory_reference_list"`

	// Indicates AD/IDP whitelisting
	EnableDirectoryAndIdentityProviderWhitelist bool `json:"enable_directory_and_identity_provider_whitelist,omitempty"`

	// List of environments associated with the project.
	EnvironmentReferenceList []*EnvironmentReference `json:"environment_reference_list"`

	// List of external networks associated with the project.
	ExternalNetworkList []*ExternalNetwork `json:"external_network_list"`

	// List of directory service user groups. These groups are not
	// managed by Nutanix.
	//
	ExternalUserGroupReferenceList []*UserGroupReference `json:"external_user_group_reference_list"`

	// List of identity provider references in the project
	IdentityProvidersReferenceList []*IdentityProvidersReference `json:"identity_providers_reference_list"`

	// resource domain
	ResourceDomain *ResourceDomainSpec `json:"resource_domain,omitempty"`

	// List of subnets for the project.
	SubnetReferenceList []*SubnetReference `json:"subnet_reference_list"`

	// List of tunnels associated with the project.
	TunnelReferenceList []*TunnelReference `json:"tunnel_reference_list"`

	// List of users in the project.
	UserReferenceList []*UserReference `json:"user_reference_list"`

	// List of VPCs associated with the project.
	VpcReferenceList []*VpcReference `json:"vpc_reference_list"`
}

// Validate validates this project resources
func (m *ProjectResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultEnvironmentReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultSubnetReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectoryReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalNetworkList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalUserGroupReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityProvidersReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnelReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcReferenceList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectResources) validateAccountReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountReferenceList); i++ {
		if swag.IsZero(m.AccountReferenceList[i]) { // not required
			continue
		}

		if m.AccountReferenceList[i] != nil {
			if err := m.AccountReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "account_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "account_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateClusterReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterReferenceList); i++ {
		if swag.IsZero(m.ClusterReferenceList[i]) { // not required
			continue
		}

		if m.ClusterReferenceList[i] != nil {
			if err := m.ClusterReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "cluster_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "cluster_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateDefaultEnvironmentReference(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultEnvironmentReference) { // not required
		return nil
	}

	if m.DefaultEnvironmentReference != nil {
		if err := m.DefaultEnvironmentReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "default_environment_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "default_environment_reference")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectResources) validateDefaultSubnetReference(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultSubnetReference) { // not required
		return nil
	}

	if m.DefaultSubnetReference != nil {
		if err := m.DefaultSubnetReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "default_subnet_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "default_subnet_reference")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectResources) validateDirectoryReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.DirectoryReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.DirectoryReferenceList); i++ {
		if swag.IsZero(m.DirectoryReferenceList[i]) { // not required
			continue
		}

		if m.DirectoryReferenceList[i] != nil {
			if err := m.DirectoryReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "directory_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "directory_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateEnvironmentReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvironmentReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentReferenceList); i++ {
		if swag.IsZero(m.EnvironmentReferenceList[i]) { // not required
			continue
		}

		if m.EnvironmentReferenceList[i] != nil {
			if err := m.EnvironmentReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "environment_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "environment_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateExternalNetworkList(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalNetworkList) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalNetworkList); i++ {
		if swag.IsZero(m.ExternalNetworkList[i]) { // not required
			continue
		}

		if m.ExternalNetworkList[i] != nil {
			if err := m.ExternalNetworkList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "external_network_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "external_network_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateExternalUserGroupReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalUserGroupReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalUserGroupReferenceList); i++ {
		if swag.IsZero(m.ExternalUserGroupReferenceList[i]) { // not required
			continue
		}

		if m.ExternalUserGroupReferenceList[i] != nil {
			if err := m.ExternalUserGroupReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "external_user_group_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "external_user_group_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateIdentityProvidersReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityProvidersReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.IdentityProvidersReferenceList); i++ {
		if swag.IsZero(m.IdentityProvidersReferenceList[i]) { // not required
			continue
		}

		if m.IdentityProvidersReferenceList[i] != nil {
			if err := m.IdentityProvidersReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "identity_providers_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "identity_providers_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateResourceDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceDomain) { // not required
		return nil
	}

	if m.ResourceDomain != nil {
		if err := m.ResourceDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "resource_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "resource_domain")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectResources) validateSubnetReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.SubnetReferenceList); i++ {
		if swag.IsZero(m.SubnetReferenceList[i]) { // not required
			continue
		}

		if m.SubnetReferenceList[i] != nil {
			if err := m.SubnetReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "subnet_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "subnet_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateTunnelReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.TunnelReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.TunnelReferenceList); i++ {
		if swag.IsZero(m.TunnelReferenceList[i]) { // not required
			continue
		}

		if m.TunnelReferenceList[i] != nil {
			if err := m.TunnelReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "tunnel_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "tunnel_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateUserReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.UserReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.UserReferenceList); i++ {
		if swag.IsZero(m.UserReferenceList[i]) { // not required
			continue
		}

		if m.UserReferenceList[i] != nil {
			if err := m.UserReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "user_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "user_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) validateVpcReferenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.VpcReferenceList); i++ {
		if swag.IsZero(m.VpcReferenceList[i]) { // not required
			continue
		}

		if m.VpcReferenceList[i] != nil {
			if err := m.VpcReferenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "vpc_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "vpc_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project resources based on the context it is used
func (m *ProjectResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultEnvironmentReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultSubnetReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirectoryReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironmentReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalNetworkList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalUserGroupReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityProvidersReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTunnelReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcReferenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectResources) contextValidateAccountReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccountReferenceList); i++ {

		if m.AccountReferenceList[i] != nil {

			if swag.IsZero(m.AccountReferenceList[i]) { // not required
				return nil
			}

			if err := m.AccountReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "account_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "account_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateClusterReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterReferenceList); i++ {

		if m.ClusterReferenceList[i] != nil {

			if swag.IsZero(m.ClusterReferenceList[i]) { // not required
				return nil
			}

			if err := m.ClusterReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "cluster_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "cluster_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateDefaultEnvironmentReference(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultEnvironmentReference != nil {

		if swag.IsZero(m.DefaultEnvironmentReference) { // not required
			return nil
		}

		if err := m.DefaultEnvironmentReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "default_environment_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "default_environment_reference")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectResources) contextValidateDefaultSubnetReference(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultSubnetReference != nil {

		if swag.IsZero(m.DefaultSubnetReference) { // not required
			return nil
		}

		if err := m.DefaultSubnetReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "default_subnet_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "default_subnet_reference")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectResources) contextValidateDirectoryReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DirectoryReferenceList); i++ {

		if m.DirectoryReferenceList[i] != nil {

			if swag.IsZero(m.DirectoryReferenceList[i]) { // not required
				return nil
			}

			if err := m.DirectoryReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "directory_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "directory_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateEnvironmentReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnvironmentReferenceList); i++ {

		if m.EnvironmentReferenceList[i] != nil {

			if swag.IsZero(m.EnvironmentReferenceList[i]) { // not required
				return nil
			}

			if err := m.EnvironmentReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "environment_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "environment_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateExternalNetworkList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalNetworkList); i++ {

		if m.ExternalNetworkList[i] != nil {

			if swag.IsZero(m.ExternalNetworkList[i]) { // not required
				return nil
			}

			if err := m.ExternalNetworkList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "external_network_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "external_network_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateExternalUserGroupReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalUserGroupReferenceList); i++ {

		if m.ExternalUserGroupReferenceList[i] != nil {

			if swag.IsZero(m.ExternalUserGroupReferenceList[i]) { // not required
				return nil
			}

			if err := m.ExternalUserGroupReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "external_user_group_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "external_user_group_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateIdentityProvidersReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IdentityProvidersReferenceList); i++ {

		if m.IdentityProvidersReferenceList[i] != nil {

			if swag.IsZero(m.IdentityProvidersReferenceList[i]) { // not required
				return nil
			}

			if err := m.IdentityProvidersReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "identity_providers_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "identity_providers_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateResourceDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceDomain != nil {

		if swag.IsZero(m.ResourceDomain) { // not required
			return nil
		}

		if err := m.ResourceDomain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "resource_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "resource_domain")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectResources) contextValidateSubnetReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubnetReferenceList); i++ {

		if m.SubnetReferenceList[i] != nil {

			if swag.IsZero(m.SubnetReferenceList[i]) { // not required
				return nil
			}

			if err := m.SubnetReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "subnet_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "subnet_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateTunnelReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TunnelReferenceList); i++ {

		if m.TunnelReferenceList[i] != nil {

			if swag.IsZero(m.TunnelReferenceList[i]) { // not required
				return nil
			}

			if err := m.TunnelReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "tunnel_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "tunnel_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateUserReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserReferenceList); i++ {

		if m.UserReferenceList[i] != nil {

			if swag.IsZero(m.UserReferenceList[i]) { // not required
				return nil
			}

			if err := m.UserReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "user_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "user_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResources) contextValidateVpcReferenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VpcReferenceList); i++ {

		if m.VpcReferenceList[i] != nil {

			if swag.IsZero(m.VpcReferenceList[i]) { // not required
				return nil
			}

			if err := m.VpcReferenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "vpc_reference_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "vpc_reference_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectResources) UnmarshalBinary(b []byte) error {
	var res ProjectResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
