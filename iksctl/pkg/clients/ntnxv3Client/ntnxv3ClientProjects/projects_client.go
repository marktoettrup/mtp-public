// Code generated by go-swagger; DO NOT EDIT.

package ntnxv3ClientProjects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ProjectsService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new projects API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ProjectsService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new projects API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ProjectsService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ProjectsService is the interface for Client methods
type ProjectsService interface {
	DeleteProjectsUUID(params *DeleteProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectsUUIDAccepted, error)

	GetProjectsUUID(params *GetProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectsUUIDOK, error)

	PostProjects(params *PostProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectsAccepted, error)

	PostProjectsList(params *PostProjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectsListOK, error)

	PutProjectsUUID(params *PutProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectsUUIDAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteProjectsUUID deletes a existing project

This operation submits a request to delete a existing Project.
*/
func (a *Client) DeleteProjectsUUID(params *DeleteProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectsUUIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectsUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectsUUID",
		Method:             "DELETE",
		PathPattern:        "/projects/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectsUUIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProjectsUUIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProjectsUUID gets a existing project

This operation gets a existing Project.
*/
func (a *Client) GetProjectsUUID(params *GetProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectsUUID",
		Method:             "GET",
		PathPattern:        "/projects/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectsUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProjectsUUIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostProjects creates a new project

This operation submits a request to create a new Project based on the input parameters.
*/
func (a *Client) PostProjects(params *PostProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjects",
		Method:             "POST",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostProjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostProjectsList gets a list of existing projects

This operation gets a list of Projects, allowing for sorting and pagination. By default, the response will not have more than 20 entities. Note: Entities that have not been created successfully are not listed.
*/
func (a *Client) PostProjectsList(params *PostProjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectsList",
		Method:             "POST",
		PathPattern:        "/projects/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProjectsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostProjectsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutProjectsUUID updates a existing project

This operation submits a request to update a existing Project based on the input parameters.
*/
func (a *Client) PutProjectsUUID(params *PutProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectsUUIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectsUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectsUUID",
		Method:             "PUT",
		PathPattern:        "/projects/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutProjectsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectsUUIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutProjectsUUIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
