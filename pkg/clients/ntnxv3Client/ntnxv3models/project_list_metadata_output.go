// Code generated by go-swagger; DO NOT EDIT.

package ntnxv3models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectListMetadataOutput Metadata for project list output
//
// # All api calls that return a list will have this metadata block
//
// swagger:model project_list_metadata_output
type ProjectListMetadataOutput struct {

	// The filter used for the results
	Filter string `json:"filter,omitempty"`

	// The kind name
	Kind *string `json:"kind,omitempty"`

	// The number of records retrieved relative to the offset
	Length int64 `json:"length,omitempty"`

	// Offset from the start of the entity list
	Offset int64 `json:"offset,omitempty"`

	// The attribute to perform sort on
	SortAttribute string `json:"sort_attribute,omitempty"`

	// sort order
	SortOrder SortOrder `json:"sort_order,omitempty"`

	// Total matches found
	TotalMatches int64 `json:"total_matches,omitempty"`
}

// Validate validates this project list metadata output
func (m *ProjectListMetadataOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListMetadataOutput) validateSortOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	if err := m.SortOrder.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sort_order")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sort_order")
		}
		return err
	}

	return nil
}

// ContextValidate validate this project list metadata output based on the context it is used
func (m *ProjectListMetadataOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSortOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListMetadataOutput) contextValidateSortOrder(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	if err := m.SortOrder.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sort_order")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sort_order")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListMetadataOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListMetadataOutput) UnmarshalBinary(b []byte) error {
	var res ProjectListMetadataOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
